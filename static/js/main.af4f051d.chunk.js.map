{"version":3,"sources":["Firebase/firebase.js","Firebase/credentials.js","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","firebase","initializeApp","db","firestore","App","data","state","considering","join","NC","NM","NE","regexnc","regexne","regexnm","this","fetch","docRef","collection","doc","orderBy","get","then","snapshot","docs","forEach","object","number","match","_this2","setState","concat","console","log","status","react_default","a","createElement","Style","Card","Group","fluid","color","header","className","Table","unstackable","class","celled","Header","Row","HeaderCell","Body","filter","map","index","id","Cell","updateCount","Component","styled","div","_templateObject","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af4f051d.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport  {apiPass ,authDomainPass , databaseURLPass, projectIdPass, storageBucketPass,messagingSenderIdPass } from './credentials'\r\nconst config = {\r\n  apiKey: apiPass,\r\n  authDomain: authDomainPass,\r\n  databaseURL: databaseURLPass,\r\n  projectId: projectIdPass,\r\n  storageBucket: storageBucketPass,\r\n  messagingSenderId: messagingSenderIdPass\r\n};\r\n\r\nfirebase.initializeApp(config);\r\nconst db = firebase.firestore();\r\nexport default db;\r\n","export const apiPass = \"AIzaSyDNw7PYb0mVgoB4yLQAk8_IvYavSA2TOZA\";\r\nexport const authDomainPass = '\"photoclub-32136.firebaseapp.com\"';\r\nexport const databaseURLPass = \"https://photoclub-32136.firebaseio.com\";\r\nexport const projectIdPass = \"photoclub-32136\";\r\nexport const storageBucketPass = \"photoclub-32136.appspot.com\";\r\nexport const messagingSenderIdPass = \"617068552232\";\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport db from \"./Firebase/firebase\";\nimport { Table } from \"semantic-ui-react\";\nimport styled from \"styled-components\";\nimport { Card } from \"semantic-ui-react\";\n\nclass App extends Component {\n  data = [];\n  state = { considering: 0, join: 0, NC: 0, NM: 0, NE: 0 };\n  componentDidMount() {\n    this.fetch();\n  }\n  regexnc = /\\d{2}NC.{3}/i;\n  regexne = /\\d{2}NE.{3}/i;\n  regexnm = /\\d{2}NM.{3}/i;\n  async fetch() {\n    const docRef = db\n      .collection(\"UserDetails\")\n      .doc(\"users\")\n      .collection(\"users\");\n\n    await docRef\n      .orderBy(\"date\",\"desc\")\n      .get()\n      .then(snapshot => {\n        snapshot.docs.forEach(data => {\n          let object = data.data();\n          if (object.number.match(this.regexnc)) {\n            this.setState({\n              NC: this.state.NC + 1\n            });\n          }\n          if (object.number.match(this.regexne)) {\n            this.setState({\n              NE: this.state.NE + 1\n            });\n          }\n          if (object.number.match(this.regexnm)) {\n            this.setState({\n              NM: this.state.NM + 1\n            });\n          }\n          this.data = this.data.concat(object);\n\n          console.log(object);\n          if (object.status === \"検討中\") {\n            this.setState({\n              considering: this.state.considering + 1\n            });\n          } else if (object.status === \"入部したい！\") {\n            this.setState({\n              join: this.state.join + 1\n            });\n          }\n        });\n      });\n    // .catch(() => {\n    //   console.log(\"Firebase Error\");\n    // });\n  }\n\n  render() {\n    //this.fetch();\n\n    return (\n      <Style>\n        <Card.Group>\n          <Card\n            fluid\n            color=\"red\"\n            header={\"入部したい！ : \" + this.state.join}\n          />\n          <Card\n            fluid\n            color=\"orange\"\n            header={\"検討中 : \" + this.state.considering}\n          />\n        </Card.Group>\n        <Card.Group className=\"cardContainer\">\n          <Card\n            className=\"card\"\n            color=\"orange\"\n            header={\"NC:\" + this.state.NC}\n          />\n          <Card\n            className=\"card\"\n            color=\"orange\"\n            header={\"NE:\" + this.state.NE}\n          />\n          <Card\n            className=\"card\"\n            color=\"orange\"\n            header={\"NM:\" + this.state.NM}\n          />\n        </Card.Group>\n\n        <Table unstackable class={\"table\"} celled>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>学籍番号</Table.HeaderCell>\n              <Table.HeaderCell>ステータス</Table.HeaderCell>\n              <Table.HeaderCell>更新回数</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n\n          <Table.Body>\n            {this.data\n              .filter(a => a.status === \"検討中\")\n              .map((number, index) => (\n                <Table.Row id={index}>\n                  <Table.Cell>{number.number}</Table.Cell>\n                  <Table.Cell>{number.status}</Table.Cell>\n                  <Table.Cell>{number.updateCount}</Table.Cell>\n                </Table.Row>\n              ))}\n          </Table.Body>\n          <Table.Body>\n            {this.data\n              .filter(a => a.status === \"入部したい！\")\n              .map((number, index) => (\n                <Table.Row id={index}>\n                  <Table.Cell>{number.number}</Table.Cell>\n                  <Table.Cell>{number.status}</Table.Cell>\n                  <Table.Cell>{number.updateCount}</Table.Cell>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </Style>\n    );\n  }\n}\n\nexport default App;\nconst Style = styled.div`\n  .cardContainer{\n    justify-content: center;\n  }\n  width: 100vw;\n  margin-top: 3em;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  align-content: center;\n\n  .table {\n    width: max-content;\n  }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}