{"version":3,"sources":["Firebase/firebase.js","Firebase/credentials.js","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","firebase","initializeApp","db","firestore","uuid","require","App","data","state","considering","join","NC","NM","NE","auth","input","error","hash","pass","i","length","charCodeAt","handleInput","e","_this","setState","target","value","handleSubmit","localStorage","setItem","regexnc","regexne","regexnm","getItem","this","fetch","docRef","collection","doc","orderBy","get","then","snapshot","docs","forEach","object","number","match","_this2","concat","status","react_default","a","createElement","Style","Card","Group","fluid","color","header","className","Table","unstackable","class","celled","Header","Row","HeaderCell","Body","filter","map","id","Cell","updateCount","Sub","Input_default","onChange","Button","onClick","Component","styled","div","_templateObject","_templateObject2","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0a786521.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport  {apiPass ,authDomainPass , databaseURLPass, projectIdPass, storageBucketPass,messagingSenderIdPass } from './credentials'\r\nconst config = {\r\n  apiKey: apiPass,\r\n  authDomain: authDomainPass,\r\n  databaseURL: databaseURLPass,\r\n  projectId: projectIdPass,\r\n  storageBucket: storageBucketPass,\r\n  messagingSenderId: messagingSenderIdPass\r\n};\r\n\r\nfirebase.initializeApp(config);\r\nconst db = firebase.firestore();\r\nexport default db;\r\n","export const apiPass = \"AIzaSyDNw7PYb0mVgoB4yLQAk8_IvYavSA2TOZA\";\r\nexport const authDomainPass = '\"photoclub-32136.firebaseapp.com\"';\r\nexport const databaseURLPass = \"https://photoclub-32136.firebaseio.com\";\r\nexport const projectIdPass = \"photoclub-32136\";\r\nexport const storageBucketPass = \"photoclub-32136.appspot.com\";\r\nexport const messagingSenderIdPass = \"617068552232\";\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport db from \"./Firebase/firebase\";\nimport { Table } from \"semantic-ui-react\";\nimport styled from \"styled-components\";\nimport { Card, Button } from \"semantic-ui-react\";\nimport Input from \"semantic-ui-react/dist/commonjs/elements/Input\";\nconst uuid = require(\"uuid/v4\");\n\nclass App extends Component {\n  data = [];\n  state = {\n    considering: 0,\n    join: 0,\n    NC: 0,\n    NM: 0,\n    NE: 0,\n    auth: false,\n    input: \"\",\n    error: \"\"\n  };\n  hash = pass => {\n    let hash = 0,\n      i,\n      chr;\n    if (pass === 0) return hash;\n    for (i = 0; i < pass.length; i++) {\n      chr = pass.charCodeAt(i);\n      hash = (hash << 5) - hash + chr;\n      hash |= 0;\n    }\n    return hash;\n  };\n  componentDidMount() {\n    const key = localStorage.getItem(\"auth\");\n    if (key === \"true\") {\n      this.setState({\n        auth: true\n      });\n    }\n    this.fetch();\n  }\n\n  handleInput = e => {\n    this.setState({ input: e.target.value });\n  };\n\n  handleSubmit = () => {\n    let passhash = this.hash(this.state.input);\n    if (passhash === -1138718691) {\n      this.setState({\n        input: \"\",\n        auth: true\n      });\n      localStorage.setItem(\"auth\", \"true\");\n    } else {\n      this.setState({\n        error: \"パスワードが違います。　:(\"\n      });\n    }\n  };\n\n  regexnc = /\\d{2}NC.{3}/i;\n  regexne = /\\d{2}NE.{3}/i;\n  regexnm = /\\d{2}NM.{3}/i;\n  async fetch() {\n    const docRef = db\n      .collection(\"UserDetails\")\n      .doc(\"users\")\n      .collection(\"users\");\n\n    await docRef\n      .orderBy(\"date\", \"desc\")\n      .get()\n      .then(snapshot => {\n        snapshot.docs.forEach(data => {\n          let object = data.data();\n          if (object.number.match(this.regexnc)) {\n            this.setState({\n              NC: this.state.NC + 1\n            });\n          }\n          if (object.number.match(this.regexne)) {\n            this.setState({\n              NE: this.state.NE + 1\n            });\n          }\n          if (object.number.match(this.regexnm)) {\n            this.setState({\n              NM: this.state.NM + 1\n            });\n          }\n          this.data = this.data.concat(object);\n\n          if (object.status === \"検討中\") {\n            this.setState({\n              considering: this.state.considering + 1\n            });\n          } else if (object.status === \"入部したい！\") {\n            this.setState({\n              join: this.state.join + 1\n            });\n          }\n        });\n      });\n    // .catch(() => {\n    //   console.log(\"Firebase Error\");\n    // });\n  }\n\n  render() {\n    //this.fetch();\n    if (this.state.auth) {\n      return (\n        <Style>\n          <Card.Group>\n            <Card\n              fluid\n              color=\"red\"\n              header={\"入部したい！ : \" + this.state.join}\n            />\n            <Card\n              fluid\n              color=\"orange\"\n              header={\"検討中 : \" + this.state.considering}\n            />\n          </Card.Group>\n          <Card.Group className=\"cardContainer\">\n            <Card\n              className=\"card\"\n              color=\"orange\"\n              header={\"NC:\" + this.state.NC}\n            />\n            <Card\n              className=\"card\"\n              color=\"orange\"\n              header={\"NE:\" + this.state.NE}\n            />\n            <Card\n              className=\"card\"\n              color=\"orange\"\n              header={\"NM:\" + this.state.NM}\n            />\n          </Card.Group>\n          <Table unstackable class={\"table\"} celled>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>学籍番号</Table.HeaderCell>\n                <Table.HeaderCell>ステータス</Table.HeaderCell>\n                <Table.HeaderCell>更新回数</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n              {this.data\n                .filter(a => a.status === \"検討中\")\n                .map(number => (\n                  <Table.Row id={uuid()}>\n                    <Table.Cell>{number.number}</Table.Cell>\n                    <Table.Cell>{number.status}</Table.Cell>\n                    <Table.Cell>{number.updateCount}</Table.Cell>\n                  </Table.Row>\n                ))}\n            </Table.Body>\n            <Table.Body>\n              {this.data\n                .filter(a => a.status === \"入部したい！\")\n                .map(number => (\n                  <Table.Row id={uuid()}>\n                    <Table.Cell>{number.number}</Table.Cell>\n                    <Table.Cell>{number.status}</Table.Cell>\n                    <Table.Cell>{number.updateCount}</Table.Cell>\n                  </Table.Row>\n                ))}\n            </Table.Body>\n          </Table>\n        </Style>\n      );\n    } else {\n      return (\n        <Sub>\n          <h1>PassKey</h1>\n          <Input onChange={this.handleInput} value={this.state.input} />\n          {this.state.error && <p> {this.state.error}</p>}\n          <Button onClick={this.handleSubmit}>Submit</Button>\n        </Sub>\n      );\n    }\n  }\n}\n\nexport default App;\nconst Style = styled.div`\n  .cardContainer {\n    justify-content: center;\n  }\n  width: 100vw;\n  margin: 3em 1em;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  align-content: center;\n\n  .table {\n    width: max-content;\n  }\n`;\n\nconst Sub = styled.div`\n  margin: 4em 1em;\n  width: 100vw;\n  height: 200px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}